on:
  push:
    branches:
      - main

name: ðŸš€ Deploy Website On Push (Main)

jobs:
  web-deploy:
    name: ðŸŽ‰ Deploy
    runs-on: ubuntu-latest

    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

      - name: Laravel setup (only first time)
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          composer run-script post-root-package-install
          composer run-script post-create-project-cmd

      - name: Create .htaccess for public redirect
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          cat << EOF > .htaccess
          <IfModule mod_rewrite.c>

            Options -MultiViews -Indexes
            RewriteEngine On

            # Set Laravel's entry point
            DirectoryIndex public/index.php

            # Redirect all HTTP requests to HTTPS
            RewriteCond %{HTTPS} !=on
            RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

            # Prevent directory listing
            RewriteCond %{QUERY_STRING} (^|&)i=\d+(&|$)
            RewriteRule ^ %{REQUEST_URI}? [R=301,L]

            # Block access to sensitive files and dotfiles (security)
            RedirectMatch 403 /\.(?!htaccess).*$
            <FilesMatch "^\.env|\.git|composer\.(json|lock)|artisan|server\.php|phpunit\.xml|webpack\.mix\.js$">
                Order allow,deny
                Deny from all
            </FilesMatch>

            # Handle Authorization Header (Laravel Sanctum, etc.)
            RewriteCond %{HTTP:Authorization} .
            RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

            # Handle X-XSRF-Token Header
            RewriteCond %{HTTP:x-xsrf-token} .
            RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

            # Redirect Trailing Slashes If Not A Folder
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_URI} (.+)/$
            RewriteRule ^ %1 [L,R=301]

            # Laravel Front Controller
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{DOCUMENT_ROOT}/public/index.php -f
            RewriteRule ^(.*)$ public/index.php [L]

          </IfModule>

          EOF

      - name: Create install.php
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          cat << 'EOF' > install.php
          <?php
          if ($_SERVER['REQUEST_METHOD'] === 'POST') {
              $envFile = __DIR__ . '/.env';

              $host = $_SERVER['HTTP_HOST'] ?? 'localhost';
              $appUrl = 'https://' . $host;

              $data = [
                  'APP_NAME' => trim($_POST['app_name']),
                  'DB_HOST' => trim($_POST['db_host']),
                  'DB_DATABASE' => trim($_POST['db_name']),
                  'DB_USERNAME' => trim($_POST['db_user']),
                  'DB_PASSWORD' => trim($_POST['db_pass']),
                  'APP_ENV' => 'production',
                  'APP_DEBUG' => 'false',
                  'APP_URL' => $appUrl,
              ];

              $env = file_get_contents($envFile);
              foreach ($data as $key => $value) {
                  $pattern = "/^" . preg_quote($key, '/') . "=.*/m";
                  if (preg_match($pattern, $env)) {
                      $env = preg_replace($pattern, "$key=$value", $env);
                  } else {
                      $env .= "\n$key=$value";
                  }
              }
              file_put_contents($envFile, $env);

              echo "<h3>.env updated!</h3>";
              echo "<pre>";
              file_put_contents(__DIR__ . '/.installed', 'yes');
              echo "</pre>";
              echo "<h3>Done. You can now delete this file.</h3>";
              exit;
          }
          ?>
          <form method="POST">
              <label>App Name: <input name="app_name"></label><br>
              <label>DB Host: <input name="db_host" value="127.0.0.1"></label><br>
              <label>DB Name: <input name="db_name"></label><br>
              <label>DB User: <input name="db_user"></label><br>
              <label>DB Password: <input name="db_pass" type="password"></label><br>
              <button type="submit">Update .env</button>
          </form>
          EOF

      - name: Force HTTPS in AppServiceProvider
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          cat << 'EOF' > app/Providers/AppServiceProvider.php
          <?php

          namespace App\Providers;

          use Illuminate\Support\ServiceProvider;
          use Illuminate\Support\Facades\URL;
          use Illuminate\Support\Facades\File;
          use Illuminate\Support\Facades\Artisan;
          use Illuminate\Support\Facades\Schema;

          class AppServiceProvider extends ServiceProvider
          {
            public function register(): void{}


            public function boot(): void
            {
            // Force HTTPS in production
            if (env('APP_ENV') === 'production') {
            URL::forceScheme('https');
            }
            // Handle installation and migrations
            $this->handleInstallationMigrations();
            }
            private function handleInstallationMigrations(): void
            {
            $basePath = base_path();
            $installedFile = "$basePath/.installed";
            $installFile = "$basePath/install.php";
            if (File::exists($installedFile) && File::exists($installFile)) {
            try {
            Schema::defaultStringLength(191);
            Artisan::call('migrate', ['--force' => true]);
            File::delete($installedFile);
            File::delete($installFile);
            logger('Installation migrations completed successfully');
            } catch (\Exception $e) {
            logger('Migration error: ' . $e->getMessage());
            }
            }
            }
            }

          EOF

      - name: ðŸ“‚ Sync files to production (FTP)
        uses: SamKirkland/FTP-Deploy-Action@4.3.0
        with:
          server: ftp.byethost6.com
          username: ${{ secrets.b6_ftp_username }}
          password: ${{ secrets.b6_ftp_password }}
          server-dir: /htdocs/
          dangerous-clean-slate: false
          exclude: |
            **/node_modules/**
            **/.github/**
            **/.git/**
            **/tests/**
            .git*
            package-lock.json
            package.json
            phpunit.xml
            .editorconfig
            vite.config.js
            README.md
